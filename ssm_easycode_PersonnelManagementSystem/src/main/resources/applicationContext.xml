<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!--        扫描包-->
    <context:component-scan base-package="com.csqf.personnelmanagementsystem">
<!--        描包下的所有子类，不包含@Controller。对于exculude-filter不存在包不精确后都进行扫描的问题。-->
<!--        controller只在springmvc.xml中配置-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--    加载数据库的配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

<!--    注入配置文件-->
<!--    使用spring自带的数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}" />
        <property name="username" value="${u}" />
        <property name="password" value="${p}" />
    </bean>


    <bean id="sf" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        之前在mybatis.xml配置的文件在这里完成注入    -->
        <property name="dataSource" ref="dataSource" />
<!--        别名-->
        <property name="typeAliasesPackage" value="com.csqf.personnelmanagementsys.entity" />
<!--        classpath指向target下的classes文件夹-->
<!--            classpath*不仅包含上面的，不仅包含class路径，还包括jar文件中的class路径。如果有多个同名文件,都会加载-->
<!--        所以只需要配置classpath就好了-->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
        <property name="configLocation" value="classpath:mybatis.xml" />
    </bean>


<!--    扫描dao,动态代理dao-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.csqf.personnelmanagementsystem.dao" />
<!--        当有多个数据源时可以指定数据源-->
        <property name="sqlSessionFactoryBeanName" value="sf" />
    </bean>
<!--    配置事务-->
    <bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        自动装配的话，如果id跟name相同，可以不写-->
        <property name="dataSource" ref="dataSource" />
    </bean>
<!--    事务，在后面的aop配置中时以下的方法配置事务-->
    <tx:advice id="txAdvice" transaction-manager="txManage">
        <tx:attributes>
            <tx:method name="query*"/>
            <tx:method name="insert*"/>
            <tx:method name="update*" />
            <tx:method name="delete*" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="mypoint" expression="execution(* com.csqf.personnelmanagementsystem.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="mypoint" />
    </aop:config>
</beans>

